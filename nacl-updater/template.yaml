---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
  LambdaCodeBucket:
    Type: String
  LambdaCodePath:
    Type: String
  LambdaSecurityGroupIds:
    Type: List<AWS::EC2::SecurityGroup::Id>
  LambdaSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  ListenerPort:
    Type: Number
    MinValue: 1
  FlowLogLogGroupName:
    Type: String
  MaxNaclRules:
    Type: Number
    Default: 20
    AllowedValues: [20, 40]
  MetricsNamespace:
    Type: String
  AllowListBucket:
    Type: String
    Default: ''
  AllowListKey:
    Type: String
    Default: ''
  FlowLogAnomaliesTopicArn:
    Type: String
    Description: ARN of the SNS topic notified of anomalous source IPs
Conditions:
  AllowListBucketExists: !Not [!Equals [!Ref AllowListBucket, '']]
  AllowListKeyExists: !Not [!Equals [!Ref AllowListKey, '']]
  AllowListExists: !And
    - Condition: AllowListBucketExists
    - Condition: AllowListKeyExists
Resources:
  NetworkAclBlue:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nacl-blue'
  NetworkAclBlueEgress:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W66
            reason: "Can't assume what protocols are in use for subnets"
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAclBlue
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  NetworkAclBlueIngress:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W66
            reason: "Can't assume what protocols are in use for subnets"
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAclBlue
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  NetworkAclGreen:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-nacl-green'
  NetworkAclGreenEgress:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W66
            reason: "Can't assume what protocols are in use for subnets"
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref NetworkAclGreen
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  NetworkAclGreenIngress:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W66
            reason: "Can't assume what protocols are in use for subnets"
    Type: AWS::EC2::NetworkAclEntry
    Properties: 
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref NetworkAclGreen
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
  NaclUpdaterSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt Lambda.Arn
      TopicArn: !Ref FlowLogAnomaliesTopicArn
  SnsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref FlowLogAnomaliesTopicArn
  LambdaAllowListPolicy:
    Type: AWS::IAM::Policy
    Condition: AllowListExists
    Properties:
      PolicyName: LambdaAllowListPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${AllowListBucket}/${AllowListKey}'
      Roles:
        - !Ref LambdaRole
  LambdaKmsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaKmsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${LambdaLogGroupKey}'
      Roles:
        - !Ref LambdaRole
  LambdaEc2Policy:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "DescribeNetworkAcls does not support resource scoping"
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaEc2Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkAcls
            Resource: '*'
            Condition:
              StringEquals:
                'ec2:Region': !Ref 'AWS::Region'
          - Effect: Allow
            Action:
              - ec2:DeleteNetworkAclEntry
              - ec2:CreateNetworkAclEntry
            Resource:
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-acl/${NetworkAclBlue.Id}'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-acl/${NetworkAclGreen.Id}'
          - Effect: Allow
            Action:
              - ec2:ReplaceNetworkAclAssociation
            Resource:
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId1}'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId2}'
              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-acl/*'
      Roles:
        - !Ref LambdaRole
  LambdaCloudWatchPolicy:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "PutMetricData can only be scoped by condition"
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaCloudWatchPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
            Resource: '*'
            Condition:
              StringEquals:
                'cloudwatch:namespace': !Ref MetricsNamespace
      Roles:
        - !Ref LambdaRole
  LambdaSnsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaSnsPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
            Resource: !GetAtt DeadLetterTopic.TopicArn
      Roles:
        - !Ref LambdaRole
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  Lambda:
    DependsOn: 
      - LambdaCloudWatchPolicy
      - LambdaEc2Policy
      - LambdaKmsPolicy
      - LambdaAllowListPolicy
      - LambdaSnsPolicy
      - LambdaLogGroup
      - NaclLogStream
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      Handler: lambda.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      ReservedConcurrentExecutions: 1
      Runtime: python3.10
      Timeout: 10
      VpcConfig:
        SubnetIds: !Ref LambdaSubnetIds
        SecurityGroupIds: !Ref LambdaSecurityGroupIds
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterTopic.TopicArn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodePath
      Environment:
        Variables:
          NETWORK_ACL_BLUE: !Ref NetworkAclBlue
          NETWORK_ACL_GREEN: !Ref NetworkAclGreen
          SUBNET_IDS: !Sub '${SubnetId1},${SubnetId2}'
          FLOW_LOG_LOG_GROUP: !Ref FlowLogLogGroupName
          NACL_LOG_GROUP: !Ref NaclLogGroup
          NACL_LOG_STREAM: !Ref NaclLogStream
          LISTENER_PORT: !Ref ListenerPort
          MAX_NACL_RULES: !Ref MaxNaclRules
          METRICS_NAMESPACE: !Ref MetricsNamespace
          ALLOW_LIST_BUCKET: !If [AllowListExists, !Ref AllowListBucket, !Ref AWS::NoValue]
          ALLOW_LIST_KEY: !If [AllowListExists, !Ref AllowListKey, !Ref AWS::NoValue]
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup 
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}'
      RetentionInDays: 7
      KmsKeyId: !GetAtt LambdaLogGroupKey.Arn
  LambdaLogGroupKeyAlias:
    Type: AWS::KMS::Alias
    Properties: 
      AliasName: !Sub 'alias/${AWS::StackName}-logs'
      TargetKeyId: !Ref LambdaLogGroupKey
  LambdaLogGroupKey:
    Type: AWS::KMS::Key
    Properties:
      Description: CloudWatch Logs encryption key
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Enable IAM Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - kms:ReEncrypt
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
              - kms:DescribeKey
            Resource: '*'
            Condition:
              ArnEquals:
                "kms:EncryptionContext:aws:logs:arn":
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/nacl/${AWS::StackName}"
  NaclLogGroup:
    Type: AWS::Logs::LogGroup 
    Properties:
      LogGroupName: !Sub '/nacl/${AWS::StackName}'
      RetentionInDays: 7
      KmsKeyId: !GetAtt LambdaLogGroupKey.Arn
  NaclLogStream:
    Type: AWS::Logs::LogStream
    Properties: 
      LogGroupName: !Ref NaclLogGroup
      LogStreamName: deny-rules
  DeadLetterTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: alias/aws/sns
Outputs:
  NaclLogGroup:
    Value: !Ref NaclLogGroup
